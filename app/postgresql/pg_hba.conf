# PostgreSQL Client Authentication Configuration File
# Security-hardened configuration for PostgreSQL 17.5
# Optimized for Plandex development environment

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             postgres                                peer
local   all             all                                     scram-sha-256

# IPv4 local connections with SCRAM-SHA-256
host    all             all             127.0.0.1/32            scram-sha-256
host    all             all             ::1/128                 scram-sha-256

# Docker internal network connections (plandex-network)
# Allow connections from Docker containers using SCRAM-SHA-256
host    all             all             172.16.0.0/12           scram-sha-256
host    all             all             192.168.0.0/16          scram-sha-256
host    all             all             10.0.0.0/8              scram-sha-256

# Development environment - Docker Compose network
# Allow connections from plandex-server container
host    plandex         plandex         all                     scram-sha-256

# Reject all other connections
# This is a security measure to ensure only authorized connections
host    all             all             all                     reject

#------------------------------------------------------------------------------
# SECURITY NOTES
#------------------------------------------------------------------------------

# 1. SCRAM-SHA-256 Authentication:
#    - Modern, secure password authentication method
#    - Replaces MD5 authentication which is vulnerable
#    - Requires PostgreSQL 10+ (we're using 17.5)

# 2. Connection Types:
#    - local: Unix domain socket connections (peer auth for postgres user)
#    - host: TCP/IP connections with password authentication

# 3. Network Security:
#    - Only localhost (127.0.0.1) and Docker networks allowed
#    - All other connections explicitly rejected
#    - IPv6 localhost (::1) also secured

# 4. Database-Specific Access:
#    - plandex user can only access plandex database
#    - postgres superuser has full access but limited to local connections

# 5. For Production Deployment:
#    - Enable SSL/TLS connections
#    - Use certificate-based authentication
#    - Restrict network ranges further
#    - Consider using connection pooling (PgBouncer)

#------------------------------------------------------------------------------
# PRODUCTION CONFIGURATION (commented out for development)
#------------------------------------------------------------------------------

# For production, uncomment and modify these rules:

# SSL-required connections for production
# hostssl   plandex         plandex         0.0.0.0/0               scram-sha-256 clientcert=1

# Reject non-SSL connections in production
# hostnossl all             all             0.0.0.0/0               reject

# Certificate-based authentication for high security
# hostssl   all             all             trusted_network/24      cert

#------------------------------------------------------------------------------
# ROLE-BASED ACCESS CONTROL (Future Enhancement)
#------------------------------------------------------------------------------

# Application roles with limited privileges:
# host    plandex         plandex_app     docker_network/16       scram-sha-256
# host    plandex         plandex_read    docker_network/16       scram-sha-256
# host    plandex         plandex_write   docker_network/16       scram-sha-256

# Administrative access (restricted to localhost):
# local   all             plandex_admin                           scram-sha-256
# host    all             plandex_admin   127.0.0.1/32            scram-sha-256

#------------------------------------------------------------------------------
# MONITORING AND LOGGING
#------------------------------------------------------------------------------

# All connection attempts are logged due to postgresql.conf settings:
# - log_connections = on
# - log_disconnections = on
# - log_hostname = on

# Failed authentication attempts are automatically logged
# Successful authentications are logged with client info